generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // pode trocar para postgresql depois
  url      = env("DATABASE_URL")
}

model Character {
  id             String       @id @default(uuid())
  name           String       @unique
  level          Int          @default(1)
  experience     Int          @default(0)

  // SPECIAL
  strength       Int
  perception     Int
  endurance      Int
  charisma       Int
  intelligence   Int
  agility        Int
  luck           Int

  // status
  hitPoints      Int          @default(100)
  actionPoints   Int          @default(50)
  radiation      Int          @default(0)
  caps           Int          @default(0) 

  // relacionamentos
  perks          CharacterPerk[]
  skills         CharacterSkill[]
  weapons        CharacterWeapon[]
  armors         CharacterArmor[]
  inventory      InventoryItem[]
  faction        Faction?      @relation(fields: [factionId], references: [id])
  factionId      String?
  quest          Quest[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Perk {
  id          String          @id @default(uuid())
  name        String          @unique
  description String
  requiredLevel Int?
  effects     Json?          
  characters  CharacterPerk[]
}

model CharacterPerk {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  perk         Perk      @relation(fields: [perkId], references: [id])
  perkId       String
  acquiredAt   DateTime  @default(now())
}

model Skill {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  baseStat    String           
  characters  CharacterSkill[]
}

model CharacterSkill {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  skill        Skill     @relation(fields: [skillId], references: [id])
  skillId      String
  level        Int       @default(1)
}

model Weapon {
  id           String     @id @default(uuid())
  name         String     @unique
  type         WeaponType
  damage       Int
  range        Int?
  weight       Float?
  value        Int        @default(0)
  ammoType     String?    
  rarity       String?    
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  owners       CharacterWeapon[]
}

model CharacterWeapon {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  weapon       Weapon    @relation(fields: [weaponId], references: [id])
  weaponId     String
  equipped     Boolean   @default(false)
}

enum WeaponType {
  Melee
  Pistol
  Rifle
  Energy
  Heavy
  Explosive
}

model Armor {
  id           String     @id @default(uuid())
  name         String     @unique
  type         ArmorType
  defense      Int
  weight       Float?
  value        Int        @default(0)
  rarity       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  owners       CharacterArmor[]
}

model CharacterArmor {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  armor        Armor     @relation(fields: [armorId], references: [id])
  armorId      String
  equipped     Boolean   @default(false)
}

enum ArmorType {
  Light
  Medium
  Heavy
  PowerArmor
}

model Item {
  id           String     @id @default(uuid())
  name         String     @unique
  type         ItemType
  description  String?
  value        Int        @default(0)
  weight       Float?
  effects      Json?     
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  inventories  InventoryItem[]
}

model InventoryItem {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  item         Item      @relation(fields: [itemId], references: [id])
  itemId       String
  quantity     Int       @default(1)
}

enum ItemType {
  Consumable
  Aid
  Ammo
  Material
  Quest
}

model Faction {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  alignment    String?    
  reputation   Int        @default(0)
  members      Character[]
}

model Quest {
  id           String     @id @default(uuid())
  title        String
  description  String
  status       QuestStatus @default(Pending)
  rewardCaps   Int         @default(0)
  experience   Int         @default(100)
  assignedTo   Character?  @relation(fields: [characterId], references: [id])
  characterId  String?
}

enum QuestStatus {
  Pending
  InProgress
  Completed
  Failed
}
