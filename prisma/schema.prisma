datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================
// ENUMS
// ========================
enum ArmorRarity {
  Common
  Epic
  Legendary
  Rare
  Uncommon
}

enum ArmorSlot {
  Arms
  Chest
  Feet
  Head
  Legs
}

enum ArmorType {
  Heavy
  Light
  Medium
  PowerArmor
}

enum EnemyType {
  Animal
  Humanoid
  SuperMutant
  Ghoul
  Robot
  Human
}

enum ItemType {
  Aid
  Ammo
  Consumable
  Material
  Quest
}

enum QuestStatus {
  Completed
  Failed
  InProgress
  Pending
}

enum ResistanceType {
  Bleed
  Radiation
  Energy
  Physical
}

enum WeaponType {
  Energy
  Explosive
  Heavy
  Melee
  Pistol
  Rifle
}

// ========================
// MODELS
// ========================

model Armor {
  id        String    @id @default(uuid())
  name      String    @unique
  defense   Int
  rarity    ArmorRarity
  slot      ArmorSlot
  type      ArmorType
  value     Int       @default(0)
  weight    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  owners    CharacterArmor[]
}

model Character {
  id           String            @id @default(uuid())
  name         String            @unique
  level        Int               @default(1)
  experience   Int               @default(0)
  hitPoints    Int               @default(100)
  actionPoints Int               @default(50)
  radiation    Int               @default(0)
  caps         Int               @default(0)
  strength     Int
  perception   Int
  endurance    Int
  charisma     Int
  intelligence Int
  agility      Int
  luck         Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  faction    Faction?          @relation(fields: [factionId], references: [id])
  factionId  String?
  location   Location?         @relation(fields: [locationId], references: [id])
  locationId String?
  user       User?             @relation(fields: [userId], references: [id])
  userId     String?
  perks      CharacterPerk[]
  skills     CharacterSkill[]
  armors     CharacterArmor[]
  weapons    CharacterWeapon[]
  inventory  InventoryItem[]
  quest      Quest[]
}

model CharacterArmor {
  id          String    @id @default(uuid())
  equipped    Boolean   @default(false)
  slot        ArmorSlot

  // Relations
  armor       Armor     @relation(fields: [armorId], references: [id])
  armorId     String
  character   Character @relation(fields: [characterId], references: [id])
  characterId String

  @@unique([characterId, armorId])
  @@unique([characterId, slot])
}

model CharacterPerk {
  id          String    @id @default(uuid())
  acquiredAt  DateTime  @default(now())

  // Relations
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  perk        Perk      @relation(fields: [perkId], references: [id])
  perkId      String
}

model CharacterSkill {
  id          String    @id @default(uuid())
  level       Int       @default(1)

  // Relations
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     String
}

model CharacterWeapon {
  id          String    @id @default(uuid())
  equipped    Boolean   @default(false)

  // Relations
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  weapon      Weapon    @relation(fields: [weaponId], references: [id])
  weaponId    String

  @@unique([characterId, weaponId])
}

model Enemy {
  id          String         @id @default(uuid())
  name        String         @unique
  level       Int            @default(1)
  damage      Int
  hitPoints   Int            @default(100)
  resistances ResistanceType
  type        EnemyType
  hostile     Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  drops       EnemyDrop[]
}

model EnemyDrop {
  id       String  @id @default(uuid())
  dropRate Float   @default(0.0)

  // Relations
  enemy    Enemy   @relation(fields: [enemyId], references: [id])
  enemyId  String
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   String
}

model Faction {
  id          String      @id @default(uuid())
  name        String      @unique
  alignment   String?
  description String?
  reputation  Int         @default(0)

  // Relations
  members     Character[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  quantity    Int       @default(1)

  // Relations
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
}

model Item {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  effects     Json?
  type        ItemType
  value       Int             @default(0)
  weight      Float?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  inventories InventoryItem[]
  enemyDrops  EnemyDrop[]
}

model Location {
  id          String      @id @default(uuid())
  name        String      @unique
  spawnType   EnemyType
  discovered  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  quests      Quest[]
  npcs        Npc[]
  characters  Character[]
}

model Npc {
  id          String    @id @default(uuid())
  name        String    @unique
  dialogue    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
}

model Perk {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String
  effects       Json?
  requiredLevel Int?

  // Relations
  characters    CharacterPerk[]
}

model Quest {
  id          String      @id @default(uuid())
  title       String
  description String
  experience  Int         @default(100)
  rewardCaps  Int         @default(0)
  status      QuestStatus @default(Pending)

  // Relations
  assignedTo  Character?  @relation(fields: [characterId], references: [id])
  characterId String?
  location    Location?   @relation(fields: [locationId], references: [id])
  locationId  String?
}

model Skill {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  baseStat    String

  // Relations
  characters  CharacterSkill[]
}

model User {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  characters Character[]
}

model Weapon {
  id        String            @id @default(uuid())
  name      String            @unique
  damage    Int
  type      WeaponType
  value     Int               @default(0)
  rarity    String?
  range     Int?
  ammoType  String?
  weight    Float?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  owners    CharacterWeapon[]
}
