datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================
// ENUMS
// ========================
enum ArmorRarity {
  Common
  Epic
  Legendary
  Rare
  Uncommon
}

enum ArmorSlot {
  Arms
  Chest
  Feet
  Head
  Legs
}

enum ArmorType {
  Heavy
  Light
  Medium
  PowerArmor
}

enum ItemType {
  Aid
  Ammo
  Consumable
  Material
  Quest
}

enum QuestStatus {
  Completed
  Failed
  InProgress
  Pending
}

enum WeaponType {
  Energy
  Explosive
  Heavy
  Melee
  Pistol
  Rifle
}

// ========================
// MODELS
// ========================
model Armor {
  id        String        @id @default(uuid())
  defense   Int
  name      String        @unique
  owners    CharacterArmor[]
  rarity    ArmorRarity
  slot      ArmorSlot
  type      ArmorType
  value     Int           @default(0)
  weight    Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Character {
  id           String          @id @default(uuid())
  actionPoints Int             @default(50)
  agility      Int
  charisma     Int
  endurance    Int
  experience   Int             @default(0)
  faction      Faction?        @relation(fields: [factionId], references: [id])
  factionId    String?
  hitPoints    Int             @default(100)
  intelligence Int
  level        Int             @default(1)
  luck         Int
  name         String          @unique
  perks        CharacterPerk[]
  perception   Int
  radiation    Int             @default(0)
  skills       CharacterSkill[]
  strength     Int
  armors       CharacterArmor[]
  weapons      CharacterWeapon[]
  inventory    InventoryItem[]
  quest        Quest[]
  caps         Int             @default(0)
  user         User?           @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model CharacterArmor {
  id          String    @id @default(uuid())
  armor       Armor     @relation(fields: [armorId], references: [id])
  armorId     String
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  equipped    Boolean   @default(false)
  slot        ArmorSlot

  @@unique([characterId, armorId])
  @@unique([characterId, slot])
}

model CharacterPerk {
  id           String    @id @default(uuid())
  acquiredAt   DateTime  @default(now())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  perk         Perk      @relation(fields: [perkId], references: [id])
  perkId       String
}

model CharacterSkill {
  id           String    @id @default(uuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  level        Int       @default(1)
  skill        Skill     @relation(fields: [skillId], references: [id])
  skillId      String
}

model CharacterWeapon {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  equipped    Boolean   @default(false)
  weapon      Weapon    @relation(fields: [weaponId], references: [id])
  weaponId    String

  @@unique([characterId, weaponId])
}

model Faction {
  id          String      @id @default(uuid())
  alignment   String?
  description String?
  members     Character[]
  name        String      @unique
  reputation  Int         @default(0)
}

model InventoryItem {
  id          String    @id @default(uuid())
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  quantity    Int       @default(1)
}

model Item {
  id          String          @id @default(uuid())
  description String?
  effects     Json?
  inventories InventoryItem[]
  name        String          @unique
  type        ItemType
  value       Int             @default(0)
  weight      Float?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Perk {
  id            String          @id @default(uuid())
  characters    CharacterPerk[]
  description   String
  effects       Json?
  name          String          @unique
  requiredLevel Int?
}

model Quest {
  assignedTo  Character?  @relation(fields: [characterId], references: [id])
  characterId String?
  description String
  experience  Int          @default(100)
  id          String       @id @default(uuid())
  rewardCaps  Int          @default(0)
  status      QuestStatus  @default(Pending)
  title       String
}

model Skill {
  characters  CharacterSkill[]
  baseStat    String
  description String
  id          String       @id @default(uuid())
  name        String       @unique
}

model User {
  characters Character[]
  createdAt  DateTime @default(now())
  id         String   @id @default(uuid())
  name       String
  updatedAt  DateTime @updatedAt
}

model Weapon {
  damage      Int
  id          String             @id @default(uuid())
  name        String             @unique
  owners      CharacterWeapon[]
  range       Int?
  type        WeaponType
  value       Int                @default(0)
  ammoType    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  rarity      String?
  weight      Float?
}
